1. 대상 객체에 대한 기능 확징이나 변경이 필요할 때 객체의 결합을 이용
  - 데코레이트할 대상 객체를 새로운 행동을 포함한 특수 장식자 객체에 넣어서 행동을 연결
  - 필요한 추가 기능을 런타임에서 동적으로 생성 가능

2. 패턴 사용 시기
  - 런타임에 객체에 추가 동작을 할당할 수 있어야 하는 경우

3. 패턴 장점
  - 객체를 여러 데코레이터로 래핑하여 여러 동작을 결합 가능
  - 단일 책임 원칙(SRP)
  - 개방 폐쇄 원칙(OCP) 
  - 의존 역전 원칙(DIP)

4. 패턴 단점
  - 데코레이팅 순서에 따라 스택 순서가 결정됨
  - 데코레이터의 기능들을 각각 알아둬야 사용할 수 있음

5. 인터페이스는 원본 클래스와 장식자 클래스를 묶어줌.
  - 그리고 장식자 클래스를 추상 클래스로 만드는데 확장을 편하게 하기 위함
  - 최상위 : 인터페이스, 중간 라인 : 원본 클래스와 장식자 추상 클래스, 최하단 : 장식자 구체 클래스
