1. 프록시 패턴은 원본 객체를 대리하여 대신 처리하게 한다. 로직의 흐름을 제어할 수 있다.
대상 객체에 접근하기 전에 프록시 객체의 메서드를 처리할 수 있다.

2. 프록시를 이용하는 이유
  - 대상 클래스의 민감한 정보 보유
  - 인스턴스화 하기에 무거움
  - 원본 객체를 수정할 수 없는 상황을 극복

3. 적용 효과
  - 보안 : 원본 객체 접근 전 권한 확인
  - 캐싱 : 캐시가 존재하지 않는 경우만 원본 객체 접근 [HTTP Proxy]
  - 데이터 유효성 검사 : 접근하기 전 유효성
  - 지연 초기화 : 해당 객체가 필요할 때 까지 생성 지연
  - 로깅 : 매개 변수 인터셉트 로깅
  - 원격 객체 : 원격 객체를 가져와 로컬처럼 보이게함

4. 패턴 장점
  - 개방 폐쇄 원칙(OCP) - 기존 대상 객체의 코드를 변경하지 않고 새로운 기능 추가 가능
  - 단일 책임 원칙(SRP) - 대상 객체는 자신의 기능에만 집중하고, 부가 기능은 프록시 객체에 위임
